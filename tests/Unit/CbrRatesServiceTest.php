<?php

namespace Tests\Unit;

use App\Services\CbrRatesService;
use Carbon\Carbon;
use SoapClient;
use stdClass;
use Tests\TestCase;
use function PHPUnit\Framework\assertTrue;

class CbrRatesServiceTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mock(SoapClient::class, function ($mock) {
            $object = new stdClass();
            $object->GetCursOnDateResult = new stdClass();
            $object->GetCursOnDateResult->any = "<diffgr:diffgram xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"
                                                    xmlns:diffgr=\"urn:schemas-microsoft-com:xml-diffgram-v1\"><ValuteData xmlns=\"\">
                                                    <ValuteCursOnDate diffgr:id=\"ValuteCursOnDate14\" msdata:rowOrder=\"13\">
                                                    <Vname>Доллар США</Vname><Vnom>1</Vnom><Vcurs>89.6883</Vcurs><Vcode>840</Vcode>
                                                    <VchCode>USD</VchCode><VunitRate>89.6883</VunitRate></ValuteCursOnDate>
                                                    <ValuteCursOnDate diffgr:id=\"ValuteCursOnDate15\" msdata:rowOrder=\"14\"><Vname>Евро</Vname>
                                                    <Vnom>1</Vnom><Vcurs>99.1919</Vcurs><Vcode>978</Vcode>
                                                    <VchCode>EUR</VchCode><VunitRate>99.1919</VunitRate></ValuteCursOnDate></ValuteData></diffgr:diffgram>";
            $mock->shouldReceive('GetCursOnDate')->once()->andReturn($object);
        });
    }

    /**
     * A basic test example.
     */
    public function test_usd_to_rub(): void
    {
        /** @var CbrRatesService $service */
        $service = $this->app->make(CbrRatesService::class);
        $rate = $service->fetchRateOnDate(Carbon::now(), 'USD', 'RUB');
        assertTrue($rate === "89.6883");
    }

    public function test_usd_to_eur(): void
    {
        /** @var CbrRatesService $service */
        $service = $this->app->make(CbrRatesService::class);
        $rate = $service->fetchRateOnDate(Carbon::now(), 'USD', 'EUR');
        assertTrue($rate === "0.90418975");
    }
}
